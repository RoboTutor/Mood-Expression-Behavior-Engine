// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace SocketConnection {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class SocketConnectionProtos {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_robotutor_Alive__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SocketConnection.Alive, global::SocketConnection.Alive.Builder> internal__static_robotutor_Alive__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_robotutor_Slide__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SocketConnection.Slide, global::SocketConnection.Slide.Builder> internal__static_robotutor_Slide__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_robotutor_ShowImage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SocketConnection.ShowImage, global::SocketConnection.ShowImage.Builder> internal__static_robotutor_ShowImage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_robotutor_RobotMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SocketConnection.RobotMessage, global::SocketConnection.RobotMessage.Builder> internal__static_robotutor_RobotMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_robotutor_Run__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SocketConnection.Run, global::SocketConnection.Run.Builder> internal__static_robotutor_Run__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_robotutor_Stop__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SocketConnection.Stop, global::SocketConnection.Stop.Builder> internal__static_robotutor_Stop__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_robotutor_Pause__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SocketConnection.Pause, global::SocketConnection.Pause.Builder> internal__static_robotutor_Pause__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_robotutor_Resume__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SocketConnection.Resume, global::SocketConnection.Resume.Builder> internal__static_robotutor_Resume__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_robotutor_TurningPointResults__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SocketConnection.TurningPointResults, global::SocketConnection.TurningPointResults.Builder> internal__static_robotutor_TurningPointResults__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_robotutor_BehaviorCommand__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SocketConnection.BehaviorCommand, global::SocketConnection.BehaviorCommand.Builder> internal__static_robotutor_BehaviorCommand__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_robotutor_ClientMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SocketConnection.ClientMessage, global::SocketConnection.ClientMessage.Builder> internal__static_robotutor_ClientMessage__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static SocketConnectionProtos() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChVtZXNzYWdlc19jc2hhcnAucHJvdG8SCXJvYm90dXRvchokZ29vZ2xlL3By" + 
          "b3RvYnVmL2NzaGFycF9vcHRpb25zLnByb3RvIhgKBUFsaXZlEg8KB3Jlc3Bv" + 
          "bmQYASABKAgiKQoFU2xpZGUSEAoIcmVsYXRpdmUYASACKAgSDgoGb2Zmc2V0" + 
          "GAIgAigFIgsKCVNob3dJbWFnZSLHAQoMUm9ib3RNZXNzYWdlEh8KBWFsaXZl" + 
          "GAEgASgLMhAucm9ib3R1dG9yLkFsaXZlEh8KBXNsaWRlGAIgASgLMhAucm9i" + 
          "b3R1dG9yLlNsaWRlEigKCnNob3dfaW1hZ2UYAyABKAsyFC5yb2JvdHV0b3Iu" + 
          "U2hvd0ltYWdlEhoKEmZldGNoX3R1cm5pbmdwb2ludBgEIAEoCBIvCgtiZWhh" + 
          "dmlvckNtZBgFIAEoCzIaLnJvYm90dXRvci5CZWhhdmlvckNvbW1hbmQiIwoD" + 
          "UnVuEg4KBnNjcmlwdBgBIAEoCRIMCgRmaWxlGAIgASgJIgYKBFN0b3AiBwoF" + 
          "UGF1c2UiCAoGUmVzdW1lIjUKE1R1cm5pbmdQb2ludFJlc3VsdHMSDwoHYW5z" + 
          "d2VycxgBIAMoCRINCgV2b3RlcxgCIAMoBSI4Cg9CZWhhdmlvckNvbW1hbmQS" + 
          "FAoMYmVoYXZpb3JuYW1lGAEgAigJEg8KB3N1Y2Nlc3MYAiABKAki9gEKDUNs" + 
          "aWVudE1lc3NhZ2USGwoDcnVuGAEgASgLMg4ucm9ib3R1dG9yLlJ1bhIdCgRz" + 
          "dG9wGAIgASgLMg8ucm9ib3R1dG9yLlN0b3ASHwoFcGF1c2UYAyABKAsyEC5y" + 
          "b2JvdHV0b3IuUGF1c2USIQoGcmVzdW1lGAQgASgLMhEucm9ib3R1dG9yLlJl" + 
          "c3VtZRI0Cgx0dXJuaW5ncG9pbnQYBSABKAsyHi5yb2JvdHV0b3IuVHVybmlu" + 
          "Z1BvaW50UmVzdWx0cxIvCgtiZWhhdmlvckNtZBgGIAEoCzIaLnJvYm90dXRv" + 
          "ci5CZWhhdmlvckNvbW1hbmRCL0gBwj4qChBTb2NrZXRDb25uZWN0aW9uEhZT" + 
          "b2NrZXRDb25uZWN0aW9uUHJvdG9z");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_robotutor_Alive__Descriptor = Descriptor.MessageTypes[0];
        internal__static_robotutor_Alive__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SocketConnection.Alive, global::SocketConnection.Alive.Builder>(internal__static_robotutor_Alive__Descriptor,
                new string[] { "Respond", });
        internal__static_robotutor_Slide__Descriptor = Descriptor.MessageTypes[1];
        internal__static_robotutor_Slide__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SocketConnection.Slide, global::SocketConnection.Slide.Builder>(internal__static_robotutor_Slide__Descriptor,
                new string[] { "Relative", "Offset", });
        internal__static_robotutor_ShowImage__Descriptor = Descriptor.MessageTypes[2];
        internal__static_robotutor_ShowImage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SocketConnection.ShowImage, global::SocketConnection.ShowImage.Builder>(internal__static_robotutor_ShowImage__Descriptor,
                new string[] { });
        internal__static_robotutor_RobotMessage__Descriptor = Descriptor.MessageTypes[3];
        internal__static_robotutor_RobotMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SocketConnection.RobotMessage, global::SocketConnection.RobotMessage.Builder>(internal__static_robotutor_RobotMessage__Descriptor,
                new string[] { "Alive", "Slide", "ShowImage", "FetchTurningpoint", "BehaviorCmd", });
        internal__static_robotutor_Run__Descriptor = Descriptor.MessageTypes[4];
        internal__static_robotutor_Run__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SocketConnection.Run, global::SocketConnection.Run.Builder>(internal__static_robotutor_Run__Descriptor,
                new string[] { "Script", "File", });
        internal__static_robotutor_Stop__Descriptor = Descriptor.MessageTypes[5];
        internal__static_robotutor_Stop__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SocketConnection.Stop, global::SocketConnection.Stop.Builder>(internal__static_robotutor_Stop__Descriptor,
                new string[] { });
        internal__static_robotutor_Pause__Descriptor = Descriptor.MessageTypes[6];
        internal__static_robotutor_Pause__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SocketConnection.Pause, global::SocketConnection.Pause.Builder>(internal__static_robotutor_Pause__Descriptor,
                new string[] { });
        internal__static_robotutor_Resume__Descriptor = Descriptor.MessageTypes[7];
        internal__static_robotutor_Resume__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SocketConnection.Resume, global::SocketConnection.Resume.Builder>(internal__static_robotutor_Resume__Descriptor,
                new string[] { });
        internal__static_robotutor_TurningPointResults__Descriptor = Descriptor.MessageTypes[8];
        internal__static_robotutor_TurningPointResults__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SocketConnection.TurningPointResults, global::SocketConnection.TurningPointResults.Builder>(internal__static_robotutor_TurningPointResults__Descriptor,
                new string[] { "Answers", "Votes", });
        internal__static_robotutor_BehaviorCommand__Descriptor = Descriptor.MessageTypes[9];
        internal__static_robotutor_BehaviorCommand__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SocketConnection.BehaviorCommand, global::SocketConnection.BehaviorCommand.Builder>(internal__static_robotutor_BehaviorCommand__Descriptor,
                new string[] { "Behaviorname", "Success", });
        internal__static_robotutor_ClientMessage__Descriptor = Descriptor.MessageTypes[10];
        internal__static_robotutor_ClientMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SocketConnection.ClientMessage, global::SocketConnection.ClientMessage.Builder>(internal__static_robotutor_ClientMessage__Descriptor,
                new string[] { "Run", "Stop", "Pause", "Resume", "Turningpoint", "BehaviorCmd", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Alive : pb::GeneratedMessage<Alive, Alive.Builder> {
    private Alive() { }
    private static readonly Alive defaultInstance = new Alive().MakeReadOnly();
    private static readonly string[] _aliveFieldNames = new string[] { "respond" };
    private static readonly uint[] _aliveFieldTags = new uint[] { 8 };
    public static Alive DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Alive DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Alive ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_Alive__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Alive, Alive.Builder> InternalFieldAccessors {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_Alive__FieldAccessorTable; }
    }
    
    public const int RespondFieldNumber = 1;
    private bool hasRespond;
    private bool respond_;
    public bool HasRespond {
      get { return hasRespond; }
    }
    public bool Respond {
      get { return respond_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _aliveFieldNames;
      if (hasRespond) {
        output.WriteBool(1, field_names[0], Respond);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRespond) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Respond);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Alive ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Alive ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Alive ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Alive ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Alive ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Alive ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Alive ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Alive ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Alive ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Alive ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Alive MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Alive prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Alive, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Alive cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Alive result;
      
      private Alive PrepareBuilder() {
        if (resultIsReadOnly) {
          Alive original = result;
          result = new Alive();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Alive MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::SocketConnection.Alive.Descriptor; }
      }
      
      public override Alive DefaultInstanceForType {
        get { return global::SocketConnection.Alive.DefaultInstance; }
      }
      
      public override Alive BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Alive) {
          return MergeFrom((Alive) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Alive other) {
        if (other == global::SocketConnection.Alive.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRespond) {
          Respond = other.Respond;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_aliveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _aliveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRespond = input.ReadBool(ref result.respond_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRespond {
        get { return result.hasRespond; }
      }
      public bool Respond {
        get { return result.Respond; }
        set { SetRespond(value); }
      }
      public Builder SetRespond(bool value) {
        PrepareBuilder();
        result.hasRespond = true;
        result.respond_ = value;
        return this;
      }
      public Builder ClearRespond() {
        PrepareBuilder();
        result.hasRespond = false;
        result.respond_ = false;
        return this;
      }
    }
    static Alive() {
      object.ReferenceEquals(global::SocketConnection.SocketConnectionProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Slide : pb::GeneratedMessage<Slide, Slide.Builder> {
    private Slide() { }
    private static readonly Slide defaultInstance = new Slide().MakeReadOnly();
    private static readonly string[] _slideFieldNames = new string[] { "offset", "relative" };
    private static readonly uint[] _slideFieldTags = new uint[] { 16, 8 };
    public static Slide DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Slide DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Slide ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_Slide__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Slide, Slide.Builder> InternalFieldAccessors {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_Slide__FieldAccessorTable; }
    }
    
    public const int RelativeFieldNumber = 1;
    private bool hasRelative;
    private bool relative_;
    public bool HasRelative {
      get { return hasRelative; }
    }
    public bool Relative {
      get { return relative_; }
    }
    
    public const int OffsetFieldNumber = 2;
    private bool hasOffset;
    private int offset_;
    public bool HasOffset {
      get { return hasOffset; }
    }
    public int Offset {
      get { return offset_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRelative) return false;
        if (!hasOffset) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _slideFieldNames;
      if (hasRelative) {
        output.WriteBool(1, field_names[1], Relative);
      }
      if (hasOffset) {
        output.WriteInt32(2, field_names[0], Offset);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRelative) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Relative);
        }
        if (hasOffset) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Offset);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Slide ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Slide ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Slide ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Slide ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Slide ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Slide ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Slide ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Slide ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Slide ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Slide ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Slide MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Slide prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Slide, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Slide cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Slide result;
      
      private Slide PrepareBuilder() {
        if (resultIsReadOnly) {
          Slide original = result;
          result = new Slide();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Slide MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::SocketConnection.Slide.Descriptor; }
      }
      
      public override Slide DefaultInstanceForType {
        get { return global::SocketConnection.Slide.DefaultInstance; }
      }
      
      public override Slide BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Slide) {
          return MergeFrom((Slide) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Slide other) {
        if (other == global::SocketConnection.Slide.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRelative) {
          Relative = other.Relative;
        }
        if (other.HasOffset) {
          Offset = other.Offset;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_slideFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _slideFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRelative = input.ReadBool(ref result.relative_);
              break;
            }
            case 16: {
              result.hasOffset = input.ReadInt32(ref result.offset_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRelative {
        get { return result.hasRelative; }
      }
      public bool Relative {
        get { return result.Relative; }
        set { SetRelative(value); }
      }
      public Builder SetRelative(bool value) {
        PrepareBuilder();
        result.hasRelative = true;
        result.relative_ = value;
        return this;
      }
      public Builder ClearRelative() {
        PrepareBuilder();
        result.hasRelative = false;
        result.relative_ = false;
        return this;
      }
      
      public bool HasOffset {
        get { return result.hasOffset; }
      }
      public int Offset {
        get { return result.Offset; }
        set { SetOffset(value); }
      }
      public Builder SetOffset(int value) {
        PrepareBuilder();
        result.hasOffset = true;
        result.offset_ = value;
        return this;
      }
      public Builder ClearOffset() {
        PrepareBuilder();
        result.hasOffset = false;
        result.offset_ = 0;
        return this;
      }
    }
    static Slide() {
      object.ReferenceEquals(global::SocketConnection.SocketConnectionProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ShowImage : pb::GeneratedMessage<ShowImage, ShowImage.Builder> {
    private ShowImage() { }
    private static readonly ShowImage defaultInstance = new ShowImage().MakeReadOnly();
    private static readonly string[] _showImageFieldNames = new string[] {  };
    private static readonly uint[] _showImageFieldTags = new uint[] {  };
    public static ShowImage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ShowImage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ShowImage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_ShowImage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ShowImage, ShowImage.Builder> InternalFieldAccessors {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_ShowImage__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _showImageFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ShowImage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ShowImage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ShowImage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ShowImage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ShowImage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ShowImage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ShowImage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ShowImage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ShowImage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ShowImage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ShowImage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ShowImage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ShowImage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ShowImage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ShowImage result;
      
      private ShowImage PrepareBuilder() {
        if (resultIsReadOnly) {
          ShowImage original = result;
          result = new ShowImage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ShowImage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::SocketConnection.ShowImage.Descriptor; }
      }
      
      public override ShowImage DefaultInstanceForType {
        get { return global::SocketConnection.ShowImage.DefaultInstance; }
      }
      
      public override ShowImage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ShowImage) {
          return MergeFrom((ShowImage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ShowImage other) {
        if (other == global::SocketConnection.ShowImage.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_showImageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _showImageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static ShowImage() {
      object.ReferenceEquals(global::SocketConnection.SocketConnectionProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RobotMessage : pb::GeneratedMessage<RobotMessage, RobotMessage.Builder> {
    private RobotMessage() { }
    private static readonly RobotMessage defaultInstance = new RobotMessage().MakeReadOnly();
    private static readonly string[] _robotMessageFieldNames = new string[] { "alive", "behaviorCmd", "fetch_turningpoint", "show_image", "slide" };
    private static readonly uint[] _robotMessageFieldTags = new uint[] { 10, 42, 32, 26, 18 };
    public static RobotMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RobotMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RobotMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_RobotMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RobotMessage, RobotMessage.Builder> InternalFieldAccessors {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_RobotMessage__FieldAccessorTable; }
    }
    
    public const int AliveFieldNumber = 1;
    private bool hasAlive;
    private global::SocketConnection.Alive alive_;
    public bool HasAlive {
      get { return hasAlive; }
    }
    public global::SocketConnection.Alive Alive {
      get { return alive_ ?? global::SocketConnection.Alive.DefaultInstance; }
    }
    
    public const int SlideFieldNumber = 2;
    private bool hasSlide;
    private global::SocketConnection.Slide slide_;
    public bool HasSlide {
      get { return hasSlide; }
    }
    public global::SocketConnection.Slide Slide {
      get { return slide_ ?? global::SocketConnection.Slide.DefaultInstance; }
    }
    
    public const int ShowImageFieldNumber = 3;
    private bool hasShowImage;
    private global::SocketConnection.ShowImage showImage_;
    public bool HasShowImage {
      get { return hasShowImage; }
    }
    public global::SocketConnection.ShowImage ShowImage {
      get { return showImage_ ?? global::SocketConnection.ShowImage.DefaultInstance; }
    }
    
    public const int FetchTurningpointFieldNumber = 4;
    private bool hasFetchTurningpoint;
    private bool fetchTurningpoint_;
    public bool HasFetchTurningpoint {
      get { return hasFetchTurningpoint; }
    }
    public bool FetchTurningpoint {
      get { return fetchTurningpoint_; }
    }
    
    public const int BehaviorCmdFieldNumber = 5;
    private bool hasBehaviorCmd;
    private global::SocketConnection.BehaviorCommand behaviorCmd_;
    public bool HasBehaviorCmd {
      get { return hasBehaviorCmd; }
    }
    public global::SocketConnection.BehaviorCommand BehaviorCmd {
      get { return behaviorCmd_ ?? global::SocketConnection.BehaviorCommand.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSlide) {
          if (!Slide.IsInitialized) return false;
        }
        if (HasBehaviorCmd) {
          if (!BehaviorCmd.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _robotMessageFieldNames;
      if (hasAlive) {
        output.WriteMessage(1, field_names[0], Alive);
      }
      if (hasSlide) {
        output.WriteMessage(2, field_names[4], Slide);
      }
      if (hasShowImage) {
        output.WriteMessage(3, field_names[3], ShowImage);
      }
      if (hasFetchTurningpoint) {
        output.WriteBool(4, field_names[2], FetchTurningpoint);
      }
      if (hasBehaviorCmd) {
        output.WriteMessage(5, field_names[1], BehaviorCmd);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAlive) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Alive);
        }
        if (hasSlide) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Slide);
        }
        if (hasShowImage) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ShowImage);
        }
        if (hasFetchTurningpoint) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, FetchTurningpoint);
        }
        if (hasBehaviorCmd) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, BehaviorCmd);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RobotMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RobotMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RobotMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RobotMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RobotMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RobotMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RobotMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RobotMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RobotMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RobotMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RobotMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RobotMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RobotMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RobotMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RobotMessage result;
      
      private RobotMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          RobotMessage original = result;
          result = new RobotMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RobotMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::SocketConnection.RobotMessage.Descriptor; }
      }
      
      public override RobotMessage DefaultInstanceForType {
        get { return global::SocketConnection.RobotMessage.DefaultInstance; }
      }
      
      public override RobotMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RobotMessage) {
          return MergeFrom((RobotMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RobotMessage other) {
        if (other == global::SocketConnection.RobotMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAlive) {
          MergeAlive(other.Alive);
        }
        if (other.HasSlide) {
          MergeSlide(other.Slide);
        }
        if (other.HasShowImage) {
          MergeShowImage(other.ShowImage);
        }
        if (other.HasFetchTurningpoint) {
          FetchTurningpoint = other.FetchTurningpoint;
        }
        if (other.HasBehaviorCmd) {
          MergeBehaviorCmd(other.BehaviorCmd);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_robotMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _robotMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::SocketConnection.Alive.Builder subBuilder = global::SocketConnection.Alive.CreateBuilder();
              if (result.hasAlive) {
                subBuilder.MergeFrom(Alive);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Alive = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::SocketConnection.Slide.Builder subBuilder = global::SocketConnection.Slide.CreateBuilder();
              if (result.hasSlide) {
                subBuilder.MergeFrom(Slide);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Slide = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::SocketConnection.ShowImage.Builder subBuilder = global::SocketConnection.ShowImage.CreateBuilder();
              if (result.hasShowImage) {
                subBuilder.MergeFrom(ShowImage);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ShowImage = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasFetchTurningpoint = input.ReadBool(ref result.fetchTurningpoint_);
              break;
            }
            case 42: {
              global::SocketConnection.BehaviorCommand.Builder subBuilder = global::SocketConnection.BehaviorCommand.CreateBuilder();
              if (result.hasBehaviorCmd) {
                subBuilder.MergeFrom(BehaviorCmd);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BehaviorCmd = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAlive {
       get { return result.hasAlive; }
      }
      public global::SocketConnection.Alive Alive {
        get { return result.Alive; }
        set { SetAlive(value); }
      }
      public Builder SetAlive(global::SocketConnection.Alive value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAlive = true;
        result.alive_ = value;
        return this;
      }
      public Builder SetAlive(global::SocketConnection.Alive.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAlive = true;
        result.alive_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAlive(global::SocketConnection.Alive value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAlive &&
            result.alive_ != global::SocketConnection.Alive.DefaultInstance) {
            result.alive_ = global::SocketConnection.Alive.CreateBuilder(result.alive_).MergeFrom(value).BuildPartial();
        } else {
          result.alive_ = value;
        }
        result.hasAlive = true;
        return this;
      }
      public Builder ClearAlive() {
        PrepareBuilder();
        result.hasAlive = false;
        result.alive_ = null;
        return this;
      }
      
      public bool HasSlide {
       get { return result.hasSlide; }
      }
      public global::SocketConnection.Slide Slide {
        get { return result.Slide; }
        set { SetSlide(value); }
      }
      public Builder SetSlide(global::SocketConnection.Slide value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSlide = true;
        result.slide_ = value;
        return this;
      }
      public Builder SetSlide(global::SocketConnection.Slide.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSlide = true;
        result.slide_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSlide(global::SocketConnection.Slide value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSlide &&
            result.slide_ != global::SocketConnection.Slide.DefaultInstance) {
            result.slide_ = global::SocketConnection.Slide.CreateBuilder(result.slide_).MergeFrom(value).BuildPartial();
        } else {
          result.slide_ = value;
        }
        result.hasSlide = true;
        return this;
      }
      public Builder ClearSlide() {
        PrepareBuilder();
        result.hasSlide = false;
        result.slide_ = null;
        return this;
      }
      
      public bool HasShowImage {
       get { return result.hasShowImage; }
      }
      public global::SocketConnection.ShowImage ShowImage {
        get { return result.ShowImage; }
        set { SetShowImage(value); }
      }
      public Builder SetShowImage(global::SocketConnection.ShowImage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasShowImage = true;
        result.showImage_ = value;
        return this;
      }
      public Builder SetShowImage(global::SocketConnection.ShowImage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasShowImage = true;
        result.showImage_ = builderForValue.Build();
        return this;
      }
      public Builder MergeShowImage(global::SocketConnection.ShowImage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasShowImage &&
            result.showImage_ != global::SocketConnection.ShowImage.DefaultInstance) {
            result.showImage_ = global::SocketConnection.ShowImage.CreateBuilder(result.showImage_).MergeFrom(value).BuildPartial();
        } else {
          result.showImage_ = value;
        }
        result.hasShowImage = true;
        return this;
      }
      public Builder ClearShowImage() {
        PrepareBuilder();
        result.hasShowImage = false;
        result.showImage_ = null;
        return this;
      }
      
      public bool HasFetchTurningpoint {
        get { return result.hasFetchTurningpoint; }
      }
      public bool FetchTurningpoint {
        get { return result.FetchTurningpoint; }
        set { SetFetchTurningpoint(value); }
      }
      public Builder SetFetchTurningpoint(bool value) {
        PrepareBuilder();
        result.hasFetchTurningpoint = true;
        result.fetchTurningpoint_ = value;
        return this;
      }
      public Builder ClearFetchTurningpoint() {
        PrepareBuilder();
        result.hasFetchTurningpoint = false;
        result.fetchTurningpoint_ = false;
        return this;
      }
      
      public bool HasBehaviorCmd {
       get { return result.hasBehaviorCmd; }
      }
      public global::SocketConnection.BehaviorCommand BehaviorCmd {
        get { return result.BehaviorCmd; }
        set { SetBehaviorCmd(value); }
      }
      public Builder SetBehaviorCmd(global::SocketConnection.BehaviorCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBehaviorCmd = true;
        result.behaviorCmd_ = value;
        return this;
      }
      public Builder SetBehaviorCmd(global::SocketConnection.BehaviorCommand.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBehaviorCmd = true;
        result.behaviorCmd_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBehaviorCmd(global::SocketConnection.BehaviorCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBehaviorCmd &&
            result.behaviorCmd_ != global::SocketConnection.BehaviorCommand.DefaultInstance) {
            result.behaviorCmd_ = global::SocketConnection.BehaviorCommand.CreateBuilder(result.behaviorCmd_).MergeFrom(value).BuildPartial();
        } else {
          result.behaviorCmd_ = value;
        }
        result.hasBehaviorCmd = true;
        return this;
      }
      public Builder ClearBehaviorCmd() {
        PrepareBuilder();
        result.hasBehaviorCmd = false;
        result.behaviorCmd_ = null;
        return this;
      }
    }
    static RobotMessage() {
      object.ReferenceEquals(global::SocketConnection.SocketConnectionProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Run : pb::GeneratedMessage<Run, Run.Builder> {
    private Run() { }
    private static readonly Run defaultInstance = new Run().MakeReadOnly();
    private static readonly string[] _runFieldNames = new string[] { "file", "script" };
    private static readonly uint[] _runFieldTags = new uint[] { 18, 10 };
    public static Run DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Run DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Run ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_Run__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Run, Run.Builder> InternalFieldAccessors {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_Run__FieldAccessorTable; }
    }
    
    public const int ScriptFieldNumber = 1;
    private bool hasScript;
    private string script_ = "";
    public bool HasScript {
      get { return hasScript; }
    }
    public string Script {
      get { return script_; }
    }
    
    public const int FileFieldNumber = 2;
    private bool hasFile;
    private string file_ = "";
    public bool HasFile {
      get { return hasFile; }
    }
    public string File {
      get { return file_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _runFieldNames;
      if (hasScript) {
        output.WriteString(1, field_names[1], Script);
      }
      if (hasFile) {
        output.WriteString(2, field_names[0], File);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasScript) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Script);
        }
        if (hasFile) {
          size += pb::CodedOutputStream.ComputeStringSize(2, File);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Run ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Run ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Run ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Run ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Run ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Run ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Run ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Run ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Run ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Run ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Run MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Run prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Run, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Run cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Run result;
      
      private Run PrepareBuilder() {
        if (resultIsReadOnly) {
          Run original = result;
          result = new Run();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Run MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::SocketConnection.Run.Descriptor; }
      }
      
      public override Run DefaultInstanceForType {
        get { return global::SocketConnection.Run.DefaultInstance; }
      }
      
      public override Run BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Run) {
          return MergeFrom((Run) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Run other) {
        if (other == global::SocketConnection.Run.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasScript) {
          Script = other.Script;
        }
        if (other.HasFile) {
          File = other.File;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_runFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _runFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasScript = input.ReadString(ref result.script_);
              break;
            }
            case 18: {
              result.hasFile = input.ReadString(ref result.file_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasScript {
        get { return result.hasScript; }
      }
      public string Script {
        get { return result.Script; }
        set { SetScript(value); }
      }
      public Builder SetScript(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasScript = true;
        result.script_ = value;
        return this;
      }
      public Builder ClearScript() {
        PrepareBuilder();
        result.hasScript = false;
        result.script_ = "";
        return this;
      }
      
      public bool HasFile {
        get { return result.hasFile; }
      }
      public string File {
        get { return result.File; }
        set { SetFile(value); }
      }
      public Builder SetFile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFile = true;
        result.file_ = value;
        return this;
      }
      public Builder ClearFile() {
        PrepareBuilder();
        result.hasFile = false;
        result.file_ = "";
        return this;
      }
    }
    static Run() {
      object.ReferenceEquals(global::SocketConnection.SocketConnectionProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Stop : pb::GeneratedMessage<Stop, Stop.Builder> {
    private Stop() { }
    private static readonly Stop defaultInstance = new Stop().MakeReadOnly();
    private static readonly string[] _stopFieldNames = new string[] {  };
    private static readonly uint[] _stopFieldTags = new uint[] {  };
    public static Stop DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Stop DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Stop ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_Stop__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Stop, Stop.Builder> InternalFieldAccessors {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_Stop__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _stopFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Stop ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Stop ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Stop ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Stop ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Stop ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Stop ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Stop ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Stop ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Stop ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Stop ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Stop MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Stop prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Stop, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Stop cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Stop result;
      
      private Stop PrepareBuilder() {
        if (resultIsReadOnly) {
          Stop original = result;
          result = new Stop();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Stop MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::SocketConnection.Stop.Descriptor; }
      }
      
      public override Stop DefaultInstanceForType {
        get { return global::SocketConnection.Stop.DefaultInstance; }
      }
      
      public override Stop BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Stop) {
          return MergeFrom((Stop) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Stop other) {
        if (other == global::SocketConnection.Stop.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stopFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stopFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Stop() {
      object.ReferenceEquals(global::SocketConnection.SocketConnectionProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Pause : pb::GeneratedMessage<Pause, Pause.Builder> {
    private Pause() { }
    private static readonly Pause defaultInstance = new Pause().MakeReadOnly();
    private static readonly string[] _pauseFieldNames = new string[] {  };
    private static readonly uint[] _pauseFieldTags = new uint[] {  };
    public static Pause DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Pause DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Pause ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_Pause__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Pause, Pause.Builder> InternalFieldAccessors {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_Pause__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pauseFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Pause ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Pause ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Pause ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Pause ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Pause ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Pause ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Pause ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Pause ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Pause ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Pause ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Pause MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Pause prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Pause, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Pause cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Pause result;
      
      private Pause PrepareBuilder() {
        if (resultIsReadOnly) {
          Pause original = result;
          result = new Pause();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Pause MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::SocketConnection.Pause.Descriptor; }
      }
      
      public override Pause DefaultInstanceForType {
        get { return global::SocketConnection.Pause.DefaultInstance; }
      }
      
      public override Pause BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Pause) {
          return MergeFrom((Pause) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Pause other) {
        if (other == global::SocketConnection.Pause.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pauseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pauseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Pause() {
      object.ReferenceEquals(global::SocketConnection.SocketConnectionProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Resume : pb::GeneratedMessage<Resume, Resume.Builder> {
    private Resume() { }
    private static readonly Resume defaultInstance = new Resume().MakeReadOnly();
    private static readonly string[] _resumeFieldNames = new string[] {  };
    private static readonly uint[] _resumeFieldTags = new uint[] {  };
    public static Resume DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Resume DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Resume ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_Resume__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Resume, Resume.Builder> InternalFieldAccessors {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_Resume__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _resumeFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Resume ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Resume ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Resume ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Resume ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Resume ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Resume ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Resume ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Resume ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Resume ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Resume ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Resume MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Resume prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Resume, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Resume cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Resume result;
      
      private Resume PrepareBuilder() {
        if (resultIsReadOnly) {
          Resume original = result;
          result = new Resume();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Resume MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::SocketConnection.Resume.Descriptor; }
      }
      
      public override Resume DefaultInstanceForType {
        get { return global::SocketConnection.Resume.DefaultInstance; }
      }
      
      public override Resume BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Resume) {
          return MergeFrom((Resume) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Resume other) {
        if (other == global::SocketConnection.Resume.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_resumeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _resumeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Resume() {
      object.ReferenceEquals(global::SocketConnection.SocketConnectionProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TurningPointResults : pb::GeneratedMessage<TurningPointResults, TurningPointResults.Builder> {
    private TurningPointResults() { }
    private static readonly TurningPointResults defaultInstance = new TurningPointResults().MakeReadOnly();
    private static readonly string[] _turningPointResultsFieldNames = new string[] { "answers", "votes" };
    private static readonly uint[] _turningPointResultsFieldTags = new uint[] { 10, 16 };
    public static TurningPointResults DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TurningPointResults DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TurningPointResults ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_TurningPointResults__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TurningPointResults, TurningPointResults.Builder> InternalFieldAccessors {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_TurningPointResults__FieldAccessorTable; }
    }
    
    public const int AnswersFieldNumber = 1;
    private pbc::PopsicleList<string> answers_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AnswersList {
      get { return pbc::Lists.AsReadOnly(answers_); }
    }
    public int AnswersCount {
      get { return answers_.Count; }
    }
    public string GetAnswers(int index) {
      return answers_[index];
    }
    
    public const int VotesFieldNumber = 2;
    private pbc::PopsicleList<int> votes_ = new pbc::PopsicleList<int>();
    public scg::IList<int> VotesList {
      get { return pbc::Lists.AsReadOnly(votes_); }
    }
    public int VotesCount {
      get { return votes_.Count; }
    }
    public int GetVotes(int index) {
      return votes_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _turningPointResultsFieldNames;
      if (answers_.Count > 0) {
        output.WriteStringArray(1, field_names[0], answers_);
      }
      if (votes_.Count > 0) {
        output.WriteInt32Array(2, field_names[1], votes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (string element in AnswersList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * answers_.Count;
        }
        {
          int dataSize = 0;
          foreach (int element in VotesList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * votes_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TurningPointResults ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TurningPointResults ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TurningPointResults ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TurningPointResults ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TurningPointResults ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TurningPointResults ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TurningPointResults ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TurningPointResults ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TurningPointResults ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TurningPointResults ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TurningPointResults MakeReadOnly() {
      answers_.MakeReadOnly();
      votes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TurningPointResults prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TurningPointResults, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TurningPointResults cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TurningPointResults result;
      
      private TurningPointResults PrepareBuilder() {
        if (resultIsReadOnly) {
          TurningPointResults original = result;
          result = new TurningPointResults();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TurningPointResults MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::SocketConnection.TurningPointResults.Descriptor; }
      }
      
      public override TurningPointResults DefaultInstanceForType {
        get { return global::SocketConnection.TurningPointResults.DefaultInstance; }
      }
      
      public override TurningPointResults BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TurningPointResults) {
          return MergeFrom((TurningPointResults) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TurningPointResults other) {
        if (other == global::SocketConnection.TurningPointResults.DefaultInstance) return this;
        PrepareBuilder();
        if (other.answers_.Count != 0) {
          result.answers_.Add(other.answers_);
        }
        if (other.votes_.Count != 0) {
          result.votes_.Add(other.votes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_turningPointResultsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _turningPointResultsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadStringArray(tag, field_name, result.answers_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.votes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<string> AnswersList {
        get { return PrepareBuilder().answers_; }
      }
      public int AnswersCount {
        get { return result.AnswersCount; }
      }
      public string GetAnswers(int index) {
        return result.GetAnswers(index);
      }
      public Builder SetAnswers(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.answers_[index] = value;
        return this;
      }
      public Builder AddAnswers(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.answers_.Add(value);
        return this;
      }
      public Builder AddRangeAnswers(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.answers_.Add(values);
        return this;
      }
      public Builder ClearAnswers() {
        PrepareBuilder();
        result.answers_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> VotesList {
        get { return PrepareBuilder().votes_; }
      }
      public int VotesCount {
        get { return result.VotesCount; }
      }
      public int GetVotes(int index) {
        return result.GetVotes(index);
      }
      public Builder SetVotes(int index, int value) {
        PrepareBuilder();
        result.votes_[index] = value;
        return this;
      }
      public Builder AddVotes(int value) {
        PrepareBuilder();
        result.votes_.Add(value);
        return this;
      }
      public Builder AddRangeVotes(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.votes_.Add(values);
        return this;
      }
      public Builder ClearVotes() {
        PrepareBuilder();
        result.votes_.Clear();
        return this;
      }
    }
    static TurningPointResults() {
      object.ReferenceEquals(global::SocketConnection.SocketConnectionProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BehaviorCommand : pb::GeneratedMessage<BehaviorCommand, BehaviorCommand.Builder> {
    private BehaviorCommand() { }
    private static readonly BehaviorCommand defaultInstance = new BehaviorCommand().MakeReadOnly();
    private static readonly string[] _behaviorCommandFieldNames = new string[] { "behaviorname", "success" };
    private static readonly uint[] _behaviorCommandFieldTags = new uint[] { 10, 18 };
    public static BehaviorCommand DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BehaviorCommand DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BehaviorCommand ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_BehaviorCommand__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BehaviorCommand, BehaviorCommand.Builder> InternalFieldAccessors {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_BehaviorCommand__FieldAccessorTable; }
    }
    
    public const int BehaviornameFieldNumber = 1;
    private bool hasBehaviorname;
    private string behaviorname_ = "";
    public bool HasBehaviorname {
      get { return hasBehaviorname; }
    }
    public string Behaviorname {
      get { return behaviorname_; }
    }
    
    public const int SuccessFieldNumber = 2;
    private bool hasSuccess;
    private string success_ = "";
    public bool HasSuccess {
      get { return hasSuccess; }
    }
    public string Success {
      get { return success_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBehaviorname) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _behaviorCommandFieldNames;
      if (hasBehaviorname) {
        output.WriteString(1, field_names[0], Behaviorname);
      }
      if (hasSuccess) {
        output.WriteString(2, field_names[1], Success);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBehaviorname) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Behaviorname);
        }
        if (hasSuccess) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Success);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BehaviorCommand ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BehaviorCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BehaviorCommand ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BehaviorCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BehaviorCommand ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BehaviorCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BehaviorCommand ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BehaviorCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BehaviorCommand ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BehaviorCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BehaviorCommand MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BehaviorCommand prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BehaviorCommand, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BehaviorCommand cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BehaviorCommand result;
      
      private BehaviorCommand PrepareBuilder() {
        if (resultIsReadOnly) {
          BehaviorCommand original = result;
          result = new BehaviorCommand();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BehaviorCommand MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::SocketConnection.BehaviorCommand.Descriptor; }
      }
      
      public override BehaviorCommand DefaultInstanceForType {
        get { return global::SocketConnection.BehaviorCommand.DefaultInstance; }
      }
      
      public override BehaviorCommand BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BehaviorCommand) {
          return MergeFrom((BehaviorCommand) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BehaviorCommand other) {
        if (other == global::SocketConnection.BehaviorCommand.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBehaviorname) {
          Behaviorname = other.Behaviorname;
        }
        if (other.HasSuccess) {
          Success = other.Success;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_behaviorCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _behaviorCommandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasBehaviorname = input.ReadString(ref result.behaviorname_);
              break;
            }
            case 18: {
              result.hasSuccess = input.ReadString(ref result.success_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBehaviorname {
        get { return result.hasBehaviorname; }
      }
      public string Behaviorname {
        get { return result.Behaviorname; }
        set { SetBehaviorname(value); }
      }
      public Builder SetBehaviorname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBehaviorname = true;
        result.behaviorname_ = value;
        return this;
      }
      public Builder ClearBehaviorname() {
        PrepareBuilder();
        result.hasBehaviorname = false;
        result.behaviorname_ = "";
        return this;
      }
      
      public bool HasSuccess {
        get { return result.hasSuccess; }
      }
      public string Success {
        get { return result.Success; }
        set { SetSuccess(value); }
      }
      public Builder SetSuccess(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSuccess = true;
        result.success_ = value;
        return this;
      }
      public Builder ClearSuccess() {
        PrepareBuilder();
        result.hasSuccess = false;
        result.success_ = "";
        return this;
      }
    }
    static BehaviorCommand() {
      object.ReferenceEquals(global::SocketConnection.SocketConnectionProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ClientMessage : pb::GeneratedMessage<ClientMessage, ClientMessage.Builder> {
    private ClientMessage() { }
    private static readonly ClientMessage defaultInstance = new ClientMessage().MakeReadOnly();
    private static readonly string[] _clientMessageFieldNames = new string[] { "behaviorCmd", "pause", "resume", "run", "stop", "turningpoint" };
    private static readonly uint[] _clientMessageFieldTags = new uint[] { 50, 26, 34, 10, 18, 42 };
    public static ClientMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClientMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_ClientMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientMessage, ClientMessage.Builder> InternalFieldAccessors {
      get { return global::SocketConnection.SocketConnectionProtos.internal__static_robotutor_ClientMessage__FieldAccessorTable; }
    }
    
    public const int RunFieldNumber = 1;
    private bool hasRun;
    private global::SocketConnection.Run run_;
    public bool HasRun {
      get { return hasRun; }
    }
    public global::SocketConnection.Run Run {
      get { return run_ ?? global::SocketConnection.Run.DefaultInstance; }
    }
    
    public const int StopFieldNumber = 2;
    private bool hasStop;
    private global::SocketConnection.Stop stop_;
    public bool HasStop {
      get { return hasStop; }
    }
    public global::SocketConnection.Stop Stop {
      get { return stop_ ?? global::SocketConnection.Stop.DefaultInstance; }
    }
    
    public const int PauseFieldNumber = 3;
    private bool hasPause;
    private global::SocketConnection.Pause pause_;
    public bool HasPause {
      get { return hasPause; }
    }
    public global::SocketConnection.Pause Pause {
      get { return pause_ ?? global::SocketConnection.Pause.DefaultInstance; }
    }
    
    public const int ResumeFieldNumber = 4;
    private bool hasResume;
    private global::SocketConnection.Resume resume_;
    public bool HasResume {
      get { return hasResume; }
    }
    public global::SocketConnection.Resume Resume {
      get { return resume_ ?? global::SocketConnection.Resume.DefaultInstance; }
    }
    
    public const int TurningpointFieldNumber = 5;
    private bool hasTurningpoint;
    private global::SocketConnection.TurningPointResults turningpoint_;
    public bool HasTurningpoint {
      get { return hasTurningpoint; }
    }
    public global::SocketConnection.TurningPointResults Turningpoint {
      get { return turningpoint_ ?? global::SocketConnection.TurningPointResults.DefaultInstance; }
    }
    
    public const int BehaviorCmdFieldNumber = 6;
    private bool hasBehaviorCmd;
    private global::SocketConnection.BehaviorCommand behaviorCmd_;
    public bool HasBehaviorCmd {
      get { return hasBehaviorCmd; }
    }
    public global::SocketConnection.BehaviorCommand BehaviorCmd {
      get { return behaviorCmd_ ?? global::SocketConnection.BehaviorCommand.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasBehaviorCmd) {
          if (!BehaviorCmd.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _clientMessageFieldNames;
      if (hasRun) {
        output.WriteMessage(1, field_names[3], Run);
      }
      if (hasStop) {
        output.WriteMessage(2, field_names[4], Stop);
      }
      if (hasPause) {
        output.WriteMessage(3, field_names[1], Pause);
      }
      if (hasResume) {
        output.WriteMessage(4, field_names[2], Resume);
      }
      if (hasTurningpoint) {
        output.WriteMessage(5, field_names[5], Turningpoint);
      }
      if (hasBehaviorCmd) {
        output.WriteMessage(6, field_names[0], BehaviorCmd);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRun) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Run);
        }
        if (hasStop) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Stop);
        }
        if (hasPause) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Pause);
        }
        if (hasResume) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Resume);
        }
        if (hasTurningpoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Turningpoint);
        }
        if (hasBehaviorCmd) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, BehaviorCmd);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClientMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClientMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ClientMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClientMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClientMessage result;
      
      private ClientMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          ClientMessage original = result;
          result = new ClientMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClientMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::SocketConnection.ClientMessage.Descriptor; }
      }
      
      public override ClientMessage DefaultInstanceForType {
        get { return global::SocketConnection.ClientMessage.DefaultInstance; }
      }
      
      public override ClientMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientMessage) {
          return MergeFrom((ClientMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientMessage other) {
        if (other == global::SocketConnection.ClientMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRun) {
          MergeRun(other.Run);
        }
        if (other.HasStop) {
          MergeStop(other.Stop);
        }
        if (other.HasPause) {
          MergePause(other.Pause);
        }
        if (other.HasResume) {
          MergeResume(other.Resume);
        }
        if (other.HasTurningpoint) {
          MergeTurningpoint(other.Turningpoint);
        }
        if (other.HasBehaviorCmd) {
          MergeBehaviorCmd(other.BehaviorCmd);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clientMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clientMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::SocketConnection.Run.Builder subBuilder = global::SocketConnection.Run.CreateBuilder();
              if (result.hasRun) {
                subBuilder.MergeFrom(Run);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Run = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::SocketConnection.Stop.Builder subBuilder = global::SocketConnection.Stop.CreateBuilder();
              if (result.hasStop) {
                subBuilder.MergeFrom(Stop);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Stop = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::SocketConnection.Pause.Builder subBuilder = global::SocketConnection.Pause.CreateBuilder();
              if (result.hasPause) {
                subBuilder.MergeFrom(Pause);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pause = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::SocketConnection.Resume.Builder subBuilder = global::SocketConnection.Resume.CreateBuilder();
              if (result.hasResume) {
                subBuilder.MergeFrom(Resume);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Resume = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::SocketConnection.TurningPointResults.Builder subBuilder = global::SocketConnection.TurningPointResults.CreateBuilder();
              if (result.hasTurningpoint) {
                subBuilder.MergeFrom(Turningpoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Turningpoint = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::SocketConnection.BehaviorCommand.Builder subBuilder = global::SocketConnection.BehaviorCommand.CreateBuilder();
              if (result.hasBehaviorCmd) {
                subBuilder.MergeFrom(BehaviorCmd);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BehaviorCmd = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRun {
       get { return result.hasRun; }
      }
      public global::SocketConnection.Run Run {
        get { return result.Run; }
        set { SetRun(value); }
      }
      public Builder SetRun(global::SocketConnection.Run value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRun = true;
        result.run_ = value;
        return this;
      }
      public Builder SetRun(global::SocketConnection.Run.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRun = true;
        result.run_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRun(global::SocketConnection.Run value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRun &&
            result.run_ != global::SocketConnection.Run.DefaultInstance) {
            result.run_ = global::SocketConnection.Run.CreateBuilder(result.run_).MergeFrom(value).BuildPartial();
        } else {
          result.run_ = value;
        }
        result.hasRun = true;
        return this;
      }
      public Builder ClearRun() {
        PrepareBuilder();
        result.hasRun = false;
        result.run_ = null;
        return this;
      }
      
      public bool HasStop {
       get { return result.hasStop; }
      }
      public global::SocketConnection.Stop Stop {
        get { return result.Stop; }
        set { SetStop(value); }
      }
      public Builder SetStop(global::SocketConnection.Stop value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStop = true;
        result.stop_ = value;
        return this;
      }
      public Builder SetStop(global::SocketConnection.Stop.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStop = true;
        result.stop_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStop(global::SocketConnection.Stop value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStop &&
            result.stop_ != global::SocketConnection.Stop.DefaultInstance) {
            result.stop_ = global::SocketConnection.Stop.CreateBuilder(result.stop_).MergeFrom(value).BuildPartial();
        } else {
          result.stop_ = value;
        }
        result.hasStop = true;
        return this;
      }
      public Builder ClearStop() {
        PrepareBuilder();
        result.hasStop = false;
        result.stop_ = null;
        return this;
      }
      
      public bool HasPause {
       get { return result.hasPause; }
      }
      public global::SocketConnection.Pause Pause {
        get { return result.Pause; }
        set { SetPause(value); }
      }
      public Builder SetPause(global::SocketConnection.Pause value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPause = true;
        result.pause_ = value;
        return this;
      }
      public Builder SetPause(global::SocketConnection.Pause.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPause = true;
        result.pause_ = builderForValue.Build();
        return this;
      }
      public Builder MergePause(global::SocketConnection.Pause value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPause &&
            result.pause_ != global::SocketConnection.Pause.DefaultInstance) {
            result.pause_ = global::SocketConnection.Pause.CreateBuilder(result.pause_).MergeFrom(value).BuildPartial();
        } else {
          result.pause_ = value;
        }
        result.hasPause = true;
        return this;
      }
      public Builder ClearPause() {
        PrepareBuilder();
        result.hasPause = false;
        result.pause_ = null;
        return this;
      }
      
      public bool HasResume {
       get { return result.hasResume; }
      }
      public global::SocketConnection.Resume Resume {
        get { return result.Resume; }
        set { SetResume(value); }
      }
      public Builder SetResume(global::SocketConnection.Resume value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResume = true;
        result.resume_ = value;
        return this;
      }
      public Builder SetResume(global::SocketConnection.Resume.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResume = true;
        result.resume_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResume(global::SocketConnection.Resume value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResume &&
            result.resume_ != global::SocketConnection.Resume.DefaultInstance) {
            result.resume_ = global::SocketConnection.Resume.CreateBuilder(result.resume_).MergeFrom(value).BuildPartial();
        } else {
          result.resume_ = value;
        }
        result.hasResume = true;
        return this;
      }
      public Builder ClearResume() {
        PrepareBuilder();
        result.hasResume = false;
        result.resume_ = null;
        return this;
      }
      
      public bool HasTurningpoint {
       get { return result.hasTurningpoint; }
      }
      public global::SocketConnection.TurningPointResults Turningpoint {
        get { return result.Turningpoint; }
        set { SetTurningpoint(value); }
      }
      public Builder SetTurningpoint(global::SocketConnection.TurningPointResults value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTurningpoint = true;
        result.turningpoint_ = value;
        return this;
      }
      public Builder SetTurningpoint(global::SocketConnection.TurningPointResults.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTurningpoint = true;
        result.turningpoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTurningpoint(global::SocketConnection.TurningPointResults value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTurningpoint &&
            result.turningpoint_ != global::SocketConnection.TurningPointResults.DefaultInstance) {
            result.turningpoint_ = global::SocketConnection.TurningPointResults.CreateBuilder(result.turningpoint_).MergeFrom(value).BuildPartial();
        } else {
          result.turningpoint_ = value;
        }
        result.hasTurningpoint = true;
        return this;
      }
      public Builder ClearTurningpoint() {
        PrepareBuilder();
        result.hasTurningpoint = false;
        result.turningpoint_ = null;
        return this;
      }
      
      public bool HasBehaviorCmd {
       get { return result.hasBehaviorCmd; }
      }
      public global::SocketConnection.BehaviorCommand BehaviorCmd {
        get { return result.BehaviorCmd; }
        set { SetBehaviorCmd(value); }
      }
      public Builder SetBehaviorCmd(global::SocketConnection.BehaviorCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBehaviorCmd = true;
        result.behaviorCmd_ = value;
        return this;
      }
      public Builder SetBehaviorCmd(global::SocketConnection.BehaviorCommand.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBehaviorCmd = true;
        result.behaviorCmd_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBehaviorCmd(global::SocketConnection.BehaviorCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBehaviorCmd &&
            result.behaviorCmd_ != global::SocketConnection.BehaviorCommand.DefaultInstance) {
            result.behaviorCmd_ = global::SocketConnection.BehaviorCommand.CreateBuilder(result.behaviorCmd_).MergeFrom(value).BuildPartial();
        } else {
          result.behaviorCmd_ = value;
        }
        result.hasBehaviorCmd = true;
        return this;
      }
      public Builder ClearBehaviorCmd() {
        PrepareBuilder();
        result.hasBehaviorCmd = false;
        result.behaviorCmd_ = null;
        return this;
      }
    }
    static ClientMessage() {
      object.ReferenceEquals(global::SocketConnection.SocketConnectionProtos.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
